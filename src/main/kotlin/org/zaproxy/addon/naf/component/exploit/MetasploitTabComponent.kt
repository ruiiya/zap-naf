package org.zaproxy.addon.naf.component.exploit

import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.mutableStateListOf
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import me.d3s34.metasploit.MetasploitDockerEngine
import me.d3s34.metasploit.MetasploitRequest
import me.d3s34.docker.ContainerAttachClient

class MetasploitTabComponent(
    val metasploitDockerEngine: MetasploitDockerEngine,
    override val coroutineScope: CoroutineScope
): ExploitTabComponent(title = "Metasploit"), ShellTabComponent {
    val metasploitRequest = mutableStateOf(MetasploitRequest("", mutableStateListOf()))
    override val shellContent = MutableStateFlow<List<String>>(emptyList())
    override val hasNewLine = mutableStateOf(false)

    lateinit var client: ContainerAttachClient

    override val status: StateFlow<ContainerAttachClient.Status>
        get() = if (this::client.isInitialized) {
            client.status
        } else {
            notRunningState
        }

    override suspend fun exploit() {
        client = metasploitDockerEngine.tryGetShell(metasploitRequest.value)
        attachJob(client)
    }

    fun sendListCommand() {
        try {
            sendCommand("use ${metasploitRequest.value.modulo}\n")
            metasploitRequest.value.options!!.forEach {
                if(it.first.trim().isNotEmpty() && it.second.trim().isNotEmpty()) {
                    sendCommand("set ${it.first} ${it.second}\n")
                }
            }
            sendCommand("run\n")
        } catch (e: Exception) {
            
        }
    }

    override fun sendCommand(command: String) {
        client.send(command.toByteArray())
    }

    override suspend fun onClose() {}

    fun close() {
        try {
            client.close()
        } catch (e: Exception) {

        }
    }
}