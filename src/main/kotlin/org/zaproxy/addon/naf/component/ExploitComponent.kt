package org.zaproxy.addon.naf.component

import androidx.compose.runtime.snapshots.SnapshotStateList
import com.arkivanov.decompose.ComponentContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import me.d3s34.commix.CommixRequest
import me.d3s34.lfi.LfiExploiter
import me.d3s34.rfi.RfiExploiter
import me.d3s34.sqlmap.restapi.request.StartTaskRequest
import me.d3s34.sqlmap.transformParam
import me.d3s34.tplmap.TplmapRequest
import org.parosproxy.paros.control.Control
import org.parosproxy.paros.model.HistoryReference
import org.zaproxy.addon.naf.NafService
import org.zaproxy.addon.naf.component.exploit.*
import org.zaproxy.addon.naf.model.*
import org.zaproxy.zap.extension.alert.ExtensionAlert
import java.net.URL
import java.nio.charset.Charset
import kotlin.coroutines.CoroutineContext
import kotlin.reflect.KClass

class ExploitComponent(
    componentContext: ComponentContext,
    val nafService: NafService,
    val listExploitTabComponent: SnapshotStateList<ExploitTabComponent>,
    override val coroutineContext: CoroutineContext
): ComponentContext by componentContext, CoroutineScope {

    private val extensionAlert by lazy {
        Control
            .getSingleton()
            .extensionLoader
            .getExtension(ExtensionAlert::class.java)
    }

    private val lfiExploiter by lazy {
        LfiExploiter()
    }

    private val rfiExploiter by lazy {
        RfiExploiter()
    }

    val currentIndex = MutableStateFlow(0)

    fun handleExploitEvent(event: ExploitEvent) {
        val alert = extensionAlert.allAlerts.find { it.alertId.toString() == event.alert.id } ?: return
        val historyRef = alert.historyRef

        when (event) {
            is SqlInjectionEvent -> {
                val sqlmapTabComponent = SqlmapTabComponent(nafService.sqlmapEngine!!, nafService.sqlmapCSVLocation)

                historyRef?.let {
                    sqlmapTabComponent.startRequestState.value = StartTaskRequest(
                        url = historyRef.uri.toString(),
                        data = historyRef.httpMessage.requestBody.content.toString(Charset.defaultCharset()),
                        cookie = historyRef.httpMessage.cookieParamsAsString
                    ).transformParam(alert.param)
                }

                listExploitTabComponent
                    .add(sqlmapTabComponent)

                currentIndex.update {
                    listExploitTabComponent.lastIndex
                }
            }
            is CommandInjectionEvent -> {

                val commixTabComponent = CommixTabComponent(nafService.commixDockerEngine!!, this)


                historyRef?.let {
                    commixTabComponent.commixRequest.value = CommixRequest(
                        url = historyRef.uri.toString(),
                        data = historyRef.httpMessage.requestBody.content.toString(Charset.defaultCharset()),
                        cookies = historyRef.httpMessage.cookieParamsAsString
                    )
                }

                listExploitTabComponent
                    .add(commixTabComponent)

                currentIndex.update {
                    listExploitTabComponent.lastIndex
                }
            }
            is TemplateInjectionEvent -> {
                val tplmapTabComponent = TplmapTabComponent(nafService.tplmapDockerEngine!!, this)
                historyRef?.let {
                    tplmapTabComponent.tplmapRequest.value = TplmapRequest(
                        url = historyRef.uri.toString(),
                        data = historyRef.httpMessage.requestBody.content.toString(Charset.defaultCharset()),
                        cookies = historyRef.httpMessage.cookieParamsAsString,
                        osShell = true
                    )
                }

                listExploitTabComponent.add(tplmapTabComponent)

                currentIndex.update {
                    listExploitTabComponent.lastIndex
                }
            }
            is LFIInjectionEvent -> {
                val lfiTabComponent = LfiTabComponent(lfiExploiter)
                lfiTabComponent.lfiRequest.value = LfiRequest(
                    url = URL(alert.uri.toString()),
                    param = alert.param,
                    vectorAttack = alert.attack,
                    filePath = LfiExploiter.nixFileProof.first(),
                    data = alert.postData,
                    cookie = historyRef.httpMessage.cookieParamsAsString
                )
                listExploitTabComponent.add(lfiTabComponent)

                currentIndex.update {
                    listExploitTabComponent.lastIndex
                }

                startAttack(listExploitTabComponent.lastIndex)
            }
            is RFIInjectionEvent -> {
                val rfiTabComponent = RfiTabComponent(rfiExploiter)

                rfiTabComponent.rfiRequest.value = RfiRequest(
                    url = URL(alert.uri.toString()),
                    param = alert.param,
                    data = alert.postData,
                    cookie = historyRef.httpMessage.cookieParamsAsString,
                    remoteFileInclude = RfiExploiter.rfiExploit
                )

                listExploitTabComponent.add(rfiTabComponent)

                currentIndex.update {
                    listExploitTabComponent.lastIndex
                }
            }
        }
    }

    fun createNewTab(tab: KClass<out ExploitTabComponent>): ExploitTabComponent {
        return when (tab) {
            SqlmapTabComponent::class -> {
                SqlmapTabComponent(
                    sqlmapEngine = nafService.sqlmapEngine!!,
                    csvLocation = nafService.sqlmapCSVLocation
                    )
            }
            CommixTabComponent::class -> {
                CommixTabComponent(
                    commixDockerEngine = nafService.commixDockerEngine!!,
                    coroutineScope = this
                )
            }
            TplmapTabComponent::class -> {
                TplmapTabComponent(
                    tplmapDockerEngine = nafService.tplmapDockerEngine!!,
                    coroutineScope = this
                )
            }
            MetasploitTabComponent::class -> {
                MetasploitTabComponent(
                    metasploitDockerEngine = nafService.metasploitDockerEngine!!,
                    coroutineScope = this
                )
            }
            LfiTabComponent::class -> {
                LfiTabComponent(
                    lfiExploiter = lfiExploiter
                )
            }
            RfiTabComponent::class -> {
                RfiTabComponent(
                    rfiExploiter = rfiExploiter
                )
            }
            else -> { StartTabComponent() }
        }
    }

    fun startAttack(index: Int) {
        launch {
            listExploitTabComponent[index].exploit()
        }
    }
}
