package org.zaproxy.addon.naf.ui.exploit

import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.State
import androidx.compose.ui.Modifier
import me.d3s34.metasploit.MetasploitRequest
import me.d3s34.docker.ContainerAttachClient
import org.zaproxy.addon.naf.ui.wizard.LabelCheckBox
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Close
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.*
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material.icons.filled.Send
import androidx.compose.runtime.*
import androidx.compose.ui.unit.dp

@Composable
fun MetasploitExploitTab(
    metasploitRequest: MutableState<MetasploitRequest>,
    startAttack: () -> Unit,
    shellContent: State<List<String>>,
    onSendCommand: (String) -> Unit,
    onAttack: () -> Unit,
    onClose: () -> Unit,
    status: State<ContainerAttachClient.Status>,
    hasNewLine: MutableState<Boolean>
) {
    MetasploitShellTemplate(
        startAttack,
        shellContent,
        onSendCommand,
        onAttack,
        onClose,
        hasNewLine,
        status
    ) {

        with(metasploitRequest) {
            val listOption = value.options!!
            OutlinedTextField(
                value = value.modulo,
                onValueChange = { value = value.copy(modulo = it) },
                label = { Text("Modulo") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
            )

            Divider()

            Column {
                listOption.forEachIndexed {
                    index, item -> Row {
                        OutlinedTextField(
                            value = listOption[index].first,
                            onValueChange = {
                                listOption[index] = listOption[index].copy(first = it)
                            },
                            label = {Text("Option")}
                        )
                        OutlinedTextField(
                            value = listOption[index].second,
                            onValueChange = {
                                listOption[index] = listOption[index].copy(second = it)
                            },
                            label = {Text("Value")}
                        )
                        Button(
                            onClick = {
                                value.options!!.removeAt(index)
                            }
                        ) {
                            Icon(Icons.Default.Close, "Remove Option")
                        }
                    }
                }
            }
    
            Button(
                onClick = {
                    value.options!!.add(Pair("",""))
                }
            ) {
                Text("Add")
            }
        }
    }
}

@Composable
fun MetasploitShellTemplate(
    startAttack: () -> Unit,
    shellContent: State<List<String>>,
    onSendCommand: (String) -> Unit,
    onAttack: () -> Unit,
    onClose: () -> Unit,
    hasNewLine: MutableState<Boolean>,
    status: State<ContainerAttachClient.Status>,
    requestInit: @Composable () -> Unit,
) {
    Column {
        val expanded = remember {
            mutableStateOf(status.value != ContainerAttachClient.Status.ATTACHING)
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable {
                    expanded.value = !expanded.value
                },
            horizontalArrangement = Arrangement.Center
        ) {
            Text(
                text = "Target",
                style = MaterialTheme.typography.subtitle1
            )

            if (expanded.value) {
                Icon(Icons.Default.KeyboardArrowUp, "more")
            } else {
                Icon(Icons.Default.KeyboardArrowUp, "more")
            }
        }

        if (expanded.value) {

            requestInit()

            Divider()

            Row {
                Button(
                    onClick = {
                        startAttack()
                    }
                ) {
                    Text("Try get shell")
                }
                Button(
                    onClick = {
                        onAttack()
                        expanded.value = false
                    }
                ) {
                    Text("Attack")
                }
                Button(
                    onClick = {
                        onClose()
                        expanded.value = true
                    }
                ) {
                    Text("Close")
                }
            }


        }

        Column {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable {
                        expanded.value = !expanded.value
                    },
                horizontalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "Shell",
                    style = MaterialTheme.typography.subtitle1
                )
            }

            Row(
                modifier = Modifier
                    .fillMaxHeight()
                    .fillMaxWidth()
                    .weight(1f)
            ) {
                val listState = rememberLazyListState()

                LaunchedEffect(hasNewLine.value) {
                    if (hasNewLine.value && listState.layoutInfo.totalItemsCount > 0) {
                        listState.animateScrollToItem(listState.layoutInfo.totalItemsCount - 1)
                        hasNewLine.value = false
                    }
                }

                LaunchedEffect(Unit) {
                    if (listState.layoutInfo.totalItemsCount > 0) {
                        listState.animateScrollToItem(listState.layoutInfo.totalItemsCount - 1)
                    }
                }

                LazyColumn(
                    state = listState,
                    contentPadding = PaddingValues(20.dp),
                    modifier = Modifier
                        .fillMaxHeight()
                ) {
                    items(shellContent.value) {
                        Text(it)
                    }
                }
            }


            val command = remember { mutableStateOf("") }
            //TODO: handle key enter event
            TextField(
                value = command.value,
                onValueChange = command::value::set,
                trailingIcon = {
                    IconButton(
                        onClick = {
                            onSendCommand(command.value)
                            command.value = ""
                        }
                    ) {
                        Icon(Icons.Default.Send, "Send command")
                    }
                },
                modifier = Modifier
                    .fillMaxWidth(),
                singleLine = true
            )
        }
    }
}